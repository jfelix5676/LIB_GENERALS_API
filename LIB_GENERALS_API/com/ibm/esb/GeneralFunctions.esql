BROKER SCHEMA com.ibm.esb

CREATE FUNCTION addCache( IN cacheName CHARACTER, IN key CHARACTER, IN val CHARACTER )
RETURNS BOOLEAN
LANGUAGE JAVA
EXTERNAL NAME "com.ibm.esb.UtilitiesFactory.addCache";

CREATE FUNCTION readCache( IN cacheName CHARACTER, IN key CHARACTER )
RETURNS CHARACTER
LANGUAGE JAVA
EXTERNAL NAME "com.ibm.esb.UtilitiesFactory.readCache";

CREATE FUNCTION checkCache( IN cacheName CHARACTER, IN key CHARACTER )
RETURNS BOOLEAN
LANGUAGE JAVA
EXTERNAL NAME "com.ibm.esb.UtilitiesFactory.checkCache";

CREATE FUNCTION deteleCache( IN cacheName CHARACTER, IN key CHARACTER )
RETURNS BOOLEAN
LANGUAGE JAVA
EXTERNAL NAME "com.ibm.esb.UtilitiesFactory.deteleCache";

CREATE FUNCTION encrypted( IN inValue CHARACTER )
RETURNS CHARACTER
LANGUAGE JAVA
EXTERNAL NAME "com.ibm.esb.UtilitiesFactory.encrypted";

CREATE FUNCTION decrypted( IN inValue CHARACTER )
RETURNS CHARACTER
LANGUAGE JAVA
EXTERNAL NAME "com.ibm.esb.UtilitiesFactory.decrypted";

CREATE FUNCTION encrypt( IN inValue CHARACTER, IN inValue2 CHARACTER )
RETURNS CHARACTER
LANGUAGE JAVA
EXTERNAL NAME "com.ibm.esb.UtilitiesFactory.encrypt";

CREATE FUNCTION decrypt( IN inValue CHARACTER, IN inValue2 CHARACTER )
RETURNS CHARACTER
LANGUAGE JAVA
EXTERNAL NAME "com.ibm.esb.UtilitiesFactory.decrypt";

CREATE FUNCTION readPath( IN inValue CHARACTER )
RETURNS CHARACTER
LANGUAGE JAVA
EXTERNAL NAME "com.ibm.esb.UtilitiesFactory.readPath";

CREATE FUNCTION readMethod( IN inValue CHARACTER )
RETURNS CHARACTER
LANGUAGE JAVA
EXTERNAL NAME "com.ibm.esb.UtilitiesFactory.readMethod";

CREATE FUNCTION replaceSpecialCharacters( IN inValue CHARACTER )
RETURNS CHARACTER
LANGUAGE JAVA
EXTERNAL NAME "com.ibm.esb.UtilitiesFactory.replaceSpecialCharacters";

CREATE FUNCTION SendEmail( IN inReceiver CHARACTER, IN inSender CHARACTER, IN inSubject CHARACTER, IN inText CHARACTER )
RETURNS BOOLEAN
LANGUAGE JAVA
EXTERNAL NAME "com.ibm.esb.UtilitiesFactory.SendEmail";

CREATE FUNCTION URLEncode( IN inValue CHARACTER )
RETURNS CHARACTER
LANGUAGE JAVA
EXTERNAL NAME "com.ibm.esb.UtilitiesFactory.URLEncode";

CREATE FUNCTION URLDecode( IN inValue CHARACTER )
RETURNS CHARACTER
LANGUAGE JAVA
EXTERNAL NAME "com.ibm.esb.UtilitiesFactory.URLDecode";

CREATE FUNCTION readConfigurationManagement (IN InValue CHARACTER) RETURNS CHARACTER
BEGIN
	DECLARE RESULT CHARACTER '';
	
	IF checkCache('XT01', 'ConfigurationManagement') = TRUE THEN
		DECLARE DataResult ROW;		
			
		CREATE LASTCHILD OF DataResult DOMAIN('XMLNSC') PARSE( CAST(readCache('XT01', 'ConfigurationManagement') AS BLOB CCSID 1208 ENCODING 546 ) );
		
		IF CARDINALITY( SELECT T.* FROM DataResult.XMLNSC.ConfigurationManagement.Item[] AS T WHERE TRIM(T.Nombre) = InValue) = 1 THEN
			SET RESULT = THE (SELECT ITEM T.Valor FROM DataResult.XMLNSC.ConfigurationManagement.Item[] AS T WHERE TRIM(T.Nombre) = InValue);
		END IF;
	ELSE	
		THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2951 VALUES (COALESCE('Se encontraron problemas con la Cache ''ConfigurationManagement''.', ''));
	END IF;
	
	RETURN TRIM(RESULT);
END;

CREATE FUNCTION TransactionalResponse( IN Application CHARACTER, IN Path CHARACTER ) RETURNS BLOB
BEGIN
	DECLARE DataResult ROW;
	DECLARE RESULT BLOB '';
	
	IF readEnvironment() = 'QAS' THEN
		CALL readTransactionalResponse(Application, Path, DataResult.TransactionalResponse.Item[]) IN Database.{'broker'}.{'dbo'};
		
		SET RESULT = CAST(COALESCE(DataResult.TransactionalResponse.Item.Response, '') AS BLOB CCSID 1208 ENCODING 546  ) ;
	END IF;
	
	RETURN RESULT;
END;

CREATE FUNCTION IsResponse( IN Application CHARACTER, IN Path CHARACTER ) RETURNS BOOLEAN
BEGIN
	DECLARE DataResult ROW;
	DECLARE RESULT BOOLEAN FALSE;
	
	IF readEnvironment() = 'QAS' THEN
		CALL readTransactionalResponse(Application, Path, DataResult.TransactionalResponse.Item[]) IN Database.{'broker'}.{'dbo'};
		
		IF FIELDVALUE(DataResult.TransactionalResponse.Item.Response) <> '' OR FIELDVALUE(DataResult.TransactionalResponse.Item.Response) IS NOT NULL THEN	
			SET RESULT = TRUE;
		END IF;
	END IF;
	
	RETURN RESULT;
END;

CREATE FUNCTION readEnvironment( ) RETURNS CHARACTER
BEGIN
	DECLARE RESULT CHARACTER '';
	
	SET RESULT = COALESCE(readConfigurationManagement('ENVIRONMENT_ESB'), 'PRD');
	
	RETURN RESULT;
END;

CREATE FUNCTION delimitedCharacter( IN string CHAR, IN length1 INT ) RETURNS CHARACTER
BEGIN
	DECLARE RESULT CHARACTER '';
	
	IF LENGTH( string ) > length1 THEN
    	SET RESULT = SUBSTRING( string FROM 1 FOR (length1 - 1 ) );
    ELSE
    	SET RESULT = string;
    END IF;
	
	RETURN RESULT;
END;

CREATE FUNCTION padding(IN string CHAR, IN length1 INT ) RETURNS CHARACTER
BEGIN
	DECLARE padding CHARACTER;
	
    IF LENGTH( string ) <= length1 THEN
    	SET padding = LEFT( string || SPACE( 1000 ), length1 );
    ELSE
    	SET padding = string;
    END IF;
     
    RETURN padding;
END;

CREATE PROCEDURE isNumeric ( IN string CHAR ) RETURNS BOOLEAN
BEGIN      
	RETURN containsCharsOnly( string, '0123456789' );      
END;
      
CREATE PROCEDURE isAlphanumeric ( IN string CHAR ) RETURNS BOOLEAN
BEGIN      
	RETURN containsCharsOnly( string,  'abcdefghijklmnopqrstuvwxyz' || 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' );
END;

CREATE PROCEDURE containsCharsOnly ( IN string CHAR, IN chars CHAR ) RETURNS BOOLEAN
BEGIN      
	DECLARE length1 INT LENGTH( string );
    DECLARE i INT 1;
    WHILE i <= length1 DO         
    	DECLARE char1 CHAR SUBSTRING( string FROM i FOR 1 );  
    	       
       	IF POSITION( char1 IN chars ) = 0 THEN          
       		RETURN FALSE;            
        END IF;   
              
        SET i = i + 1;
        
      END WHILE;      
	RETURN TRUE;      
END;   

CREATE FUNCTION readBrokerName ( ) RETURNS CHARACTER
BEGIN
	RETURN BrokerName;
END;

CREATE FUNCTION readQueueManagerName ( ) RETURNS CHARACTER
BEGIN
	RETURN QueueManagerName;
END;

CREATE FUNCTION readNodeLabel ( ) RETURNS CHARACTER
BEGIN
	RETURN NodeLabel;
END;

CREATE FUNCTION readMessageFlowLabel ( ) RETURNS CHARACTER
BEGIN
	RETURN MessageFlowLabel;
END;

CREATE FUNCTION readApplicationLabel ( ) RETURNS CHARACTER
BEGIN
	RETURN ApplicationLabel;
END;

CREATE FUNCTION readLibraryLabel ( ) RETURNS CHARACTER
BEGIN
	RETURN LibraryLabel;
END;

CREATE FUNCTION readParameters (IN DataResult REFERENCE, IN InRoot REFERENCE, IN InLocal REFERENCE )
BEGIN
	DECLARE Identifier, Application, Method, Operation, Path, URI, Host CHARACTER '';
			
	DECLARE HTTP, Segment ROW;
	DECLARE XOriginalHTTPCommand, HostName, XScheme CHARACTER '';
				
	SET XScheme = InRoot.HTTPInputHeader."X-Scheme";
	SET HostName = XScheme || '://' || InRoot.HTTPInputHeader.Host;
	SET XOriginalHTTPCommand = TRIM(REPLACE(InRoot.HTTPInputHeader."X-Original-HTTP-Command", HostName, ''));
	SET XOriginalHTTPCommand = TRIM(REPLACE(XOriginalHTTPCommand, 'HTTP/1.1', ''));
			
	CALL Split(XOriginalHTTPCommand, HTTP, ' ');		
	CALL Split(HTTP.Array[2], Segment, '/');
	
	SET Identifier = UUIDASCHAR;
	SET Application = readApplicationLabel();
	SET Method = HTTP.Array[1];
	SET Operation = Segment.Array[ CARDINALITY(Segment.Array[]) ];
	SET Path = HTTP.Array[2];
	SET URI = HostName || HTTP.Array[2];
	SET Host = InRoot.HTTPInputHeader."X-Remote-Host";
	
	CREATE LASTCHILD OF DataResult.REST.Input TYPE NameValue NAME 'Identifier' VALUE Identifier;
	CREATE LASTCHILD OF DataResult.REST.Input TYPE NameValue NAME 'Application' VALUE Application;
	CREATE LASTCHILD OF DataResult.REST.Input TYPE NameValue NAME 'Method' VALUE Method;
	CREATE LASTCHILD OF DataResult.REST.Input TYPE NameValue NAME 'Operation' VALUE Operation;
	CREATE LASTCHILD OF DataResult.REST.Input TYPE NameValue NAME 'Path' VALUE Path;
	CREATE LASTCHILD OF DataResult.REST.Input TYPE NameValue NAME 'URI' VALUE URI;
	CREATE LASTCHILD OF DataResult.REST.Input TYPE NameValue NAME 'Host' VALUE Host;
	CREATE LASTCHILD OF DataResult.REST.Input TYPE Name NAME 'Parameters';
	
	DECLARE REF_ARRAY1 REFERENCE TO InRoot.HTTPInputHeader.[1];			
	WHILE LASTMOVE(REF_ARRAY1) = TRUE DO
		IF FIELDNAME(REF_ARRAY1) <> 'X-Server-Name' 
		AND FIELDNAME(REF_ARRAY1) <> 'X-Server-Port' 
		AND FIELDNAME(REF_ARRAY1) <> 'Host'
		AND FIELDNAME(REF_ARRAY1) <> 'Accept-Encoding'
		AND FIELDNAME(REF_ARRAY1) <> 'X-Original-HTTP-Command'
		AND FIELDNAME(REF_ARRAY1) <> 'X-Remote-Addr'
		AND FIELDNAME(REF_ARRAY1) <> 'User-Agent'
		AND FIELDNAME(REF_ARRAY1) <> 'X-Query-String'
		AND FIELDNAME(REF_ARRAY1) <> 'X-Scheme'
		AND FIELDNAME(REF_ARRAY1) <> 'Content-Length'
		AND FIELDNAME(REF_ARRAY1) <> 'Content-Type'
		AND FIELDNAME(REF_ARRAY1) <> 'X-Remote-Host'
		AND FIELDNAME(REF_ARRAY1) <> 'Connection' THEN
					
			CREATE LASTCHILD OF DataResult.REST.Input.Parameters TYPE NameValue NAME LOWER(FIELDNAME(REF_ARRAY1)) VALUE FIELDVALUE(REF_ARRAY1);
		END IF;
				
		MOVE REF_ARRAY1 NEXTSIBLING;
	END WHILE;
				
	DECLARE REF_ARRAY2 REFERENCE TO InLocal.HTTP.Input.QueryString.[1];			
	WHILE LASTMOVE(REF_ARRAY2) = TRUE DO
		CREATE LASTCHILD OF DataResult.REST.Input.Parameters TYPE NameValue NAME LOWER(FIELDNAME(REF_ARRAY2)) VALUE FIELDVALUE(REF_ARRAY2);
					
		MOVE REF_ARRAY2 NEXTSIBLING;
	END WHILE;
END;

CREATE FUNCTION Split (IN S CHARACTER, IN DataSet REFERENCE, IN Delim CHARACTER) 
BEGIN 
   	DECLARE P INTEGER; 
   	DECLARE Idx INTEGER 1; 
	
   	SET DataSet = NULL; 

   	REPEAT 
      	SET P = POSITION(Delim IN S); 
      	IF P = 0 THEN 
         	SET DataSet.Array[Idx] = S; 
      	ELSE 
         	SET DataSet.Array[Idx] = LEFT(S, P - 1); 
         	SET S = SUBSTRING(S FROM P + LENGTH(Delim)); 
         	SET Idx = Idx + 1; 
      	END IF; 
      	
  		UNTIL P = 0    
  	END REPEAT;    
END;

CREATE PROCEDURE readTransactionalResponse( IN Application CHARACTER, IN Path CHARACTER )
LANGUAGE DATABASE
DYNAMIC RESULT SETS 1
EXTERNAL NAME "readTransactionalResponse";
